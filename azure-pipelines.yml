# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/vsts/pipelines/apps/windows/dot-net
#https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml

variables:
    solution: '**/StankinsV2.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    year: $(Date:yyyy)
    month: $(Date:MM)
    day: $(Date:dd)
    uk: $(Date:yyyyMMdd)
    deployWindows: 1
    deployLinux: 1

name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

jobs:

- job: SetProps
  pool:
    vmImage: 'vs2017-win2016'
  condition: true
  steps:
    - checkout: none #skip checking out the default repository resource
    - powershell: |
        $yearPW= Get-Date -Format yyyy
        $monthPW=Get-Date -Format MM
        $dayPW=Get-Date -Format dd
        Write-Host "##vso[task.setvariable variable=PWyear;isOutput=true]$yearPW"
        Write-Host "##vso[task.setvariable variable=PWmonth;isOutput=true]$monthPW"
        Write-Host "##vso[task.setvariable variable=PWday;isOutput=true]$dayPW"
        Write-Host "##vso[task.setvariable variable=PWversion;isOutput=true]$yearPW.$monthPW.$dayPW.$env:BUILD_BUILDID"
      
      name: setvarStep


    - script: |
        echo hello from SettingVariousPropertiesMissing
        rem echo $(Build.ArtifactStagingDirectory) $(TeamProject) $(BuildDefinitionName) $(SourceBranchName) $(Date:yyyyMMdd) $(Rev:.r)   
        rem echo %BUILDDEFINITIONNAME% %SOURCEBRANCHNAME% %(DATE:yyyyMMdd)% %(REV:.r)%    
        rem echo Hello World from %AGENT_NAME%.
        rem echo My ID is %AGENT_ID%.
        rem echo AGENT_WORKFOLDER contents:
        rem @dir %AGENT_WORKFOLDER%
        rem echo AGENT_BUILDDIRECTORY contents:
        rem @dir %AGENT_BUILDDIRECTORY%
        rem echo BUILD_SOURCESDIRECTORY contents:
        rem @dir %BUILD_SOURCESDIRECTORY%      
        echo $(Date:yyyyMMdd)
        cmd /K set

- job: TestMyProps

  dependsOn: SetProps
  condition: true

  pool:
    vmImage: 'vs2017-win2016'

  
  variables:
    MyVersion: $[ dependencies.SetProps.outputs['setvarStep.PWversion'] ]  # map in the variable
 
  steps:
    - checkout: none #skip checking out the default repository resource
    - script: echo this is version $(MyVersion)
      name: echovar    

- job: DownloadFilesAndModifyBackend

  dependsOn: SetProps
  condition: true

  pool:
    vmImage: 'vs2017-win2016'

  
  variables:
    MyVersion: $[ dependencies.SetProps.outputs['setvarStep.PWversion'] ]  # map in the variable
 
  steps:
    - script: echo this is version $(MyVersion)
      name: echovar    
    
    - script: |
        dotnet tool install  --tool-path . dotnet-property   
        dotnet-property "Stankinsv2/**/Stankins*.csproj" Version:"%MyVersion%"
      displayName: versioning

    - task: ArchiveFiles@2
      displayName: 'arhive files'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip' 
        archiveFile: '$(Build.ArtifactStagingDirectory)/files-$(Build.BuildId).zip' 
        replaceExistingArchive: true 

    - task: PublishBuildArtifacts@1
      inputs:
         artifactName: dotNetModifs
      displayName: Publish files as Artifact
     

- job: BuildFrontEnd
  dependsOn: 
  - SetProps
  - DownloadFilesAndModifyBackend
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: dotNetModifs
      downloadPath: $(Build.SourcesDirectory)
      #downloadPath: $(Agent.BuildDirectory)

  - script: |
       dir 
       dir dotNetModifs
       dir dotNetModifs\files-$(Build.BuildId).zip
       move dotNetModifs\files-$(Build.BuildId).zip files-$(Build.BuildId).zip 
    displayName: 'moving file artifact'

  - task: ExtractFiles@1
    displayName: 'Extract zip files'
    inputs:
        archiveFilePatterns: '*.zip' 
        destinationFolder: $(Build.SourcesDirectory)
        cleanDestinationFolder: false 

  - script: |
       rem delete old artifact files
       del files-$(Build.BuildId).zip 
       dir
       cd stankinsv2\solution\StankinsV2\StankinsAliveAngular
       echo before install angular
       rem https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/npm?view=vsts
       call npm install -g @angular/cli
       echo before npm
       call npm i
       echo before build
       rem see robocopy in build.bat
       build.bat 
       echo finish
    displayName: 'npm and angular publish'


  - task: ArchiveFiles@2
    displayName: 'arhive files'
    inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip' 
        archiveFile: '$(Build.ArtifactStagingDirectory)/files-$(Build.BuildId).zip' 
        replaceExistingArchive: true 

  - task: PublishBuildArtifacts@1
    displayName: Publish files as Artifact
      




- job: Windows
  dependsOn: 
  - SetProps
  - BuildFrontEnd
  condition: eq(variables['deployWindows'],1)
  pool:
    vmImage: 'vs2017-win2016'

  variables:
    MyVersion: $[ dependencies.SetProps.outputs['setvarStep.PWversion'] ]  # map in the variable
 
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.SourcesDirectory)
      #downloadPath: $(Agent.BuildDirectory)

  - script: |
       dir
       move drop\files-$(Build.BuildId).zip files-$(Build.BuildId).zip 
    displayName: 'moving file artifact'

  - task: ExtractFiles@1
    displayName: 'Extract zip files'
    inputs:
        archiveFilePatterns: '*.zip' 
        destinationFolder: $(Build.SourcesDirectory)
        cleanDestinationFolder: false 


  - script: |
       dir
       cd stankinsv2/solution/
    displayName: 'cd to folder'

  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.1.300'
    inputs:
        version: 2.1.300

  
  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
        restoreSolution: '$(solution)'
  
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - script: |
        dotnet tool install  --tool-path . coverlet.console
        dotnet tool install  --tool-path . dotnet-reportgenerator-globaltool 
        dotnet tool install  --tool-path . DotnetThx 
    displayName: install global tools

  - script: |
        dir StankinsTestXUnit.dll  /s /b
        rem cd stankinsv2/solution/StankinsV2/StankinsStatusWeb
        rem dotnet-thx.exe
        rem cd ../StankinsTestXUnit
        rem dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover stankinsv2/solution/StankinsV2/StankinsTestXUnit/StankinsTestXUnit.csproj
        coverlet stankinsv2\solution\StankinsV2\StankinsTestXUnit\bin\$(buildConfiguration)\netcoreapp2.1\StankinsTestXUnit.dll --target "dotnet" --targetargs "test stankinsv2\solution\StankinsV2\StankinsTestXUnit\StankinsTestXUnit.csproj --no-build" --format opencover --exclude "[xunit*]*"
        reportgenerator "-reports:coverage.opencover.xml" "-targetdir:coveragereport" -reporttypes:HTMLInline;HTMLSummary;Badges
        xcopy coveragereport  $(Build.ArtifactStagingDirectory)\cc\ /S  
        rem restoring current dir
        rem cd ../../../../ 
        dir 
    displayName: test dot net
  - script: |
        echo start publish windows
        dotnet publish -o $(Build.ArtifactStagingDirectory)\win10-x64  -f netcoreapp2.1 -c Release -r win10-x64 stankinsv2/solution/StankinsV2/StankinsStatusWeb/StankinsAliveMonitor.csproj
        cd stankinsv2/solution/
        xcopy $(Build.ArtifactStagingDirectory)\win10-x64 win10-x64\ /I /E
        docker build . -t stankins_windows -f Dockerfile_win
        docker tag stankins_windows ignatandrei/stankins_windows
        docker image ls
        echo %MY_PASSWORD_DOCKER%| docker login --username ignatandrei --password-stdin
        docker push ignatandrei/stankins_windows
    displayName: 'docker'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

- job: Linux
  dependsOn: 
  - SetProps
  - BuildFrontEnd
  condition: eq(variables['deployLinux'],1)
  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    MyVersion: $[ dependencies.SetProps.outputs['setvarStep.PWversion'] ]  # map in the variable
 
  
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.SourcesDirectory)
      #downloadPath: $(Agent.BuildDirectory)

  - script: |
       ls -l
       mv drop/files-$(Build.BuildId).zip .
    displayName: 'moving file artifact'

  - task: ExtractFiles@1
    displayName: 'Extract zip files'
    inputs:
        archiveFilePatterns: '*.zip' 
        destinationFolder: $(Build.SourcesDirectory)
        cleanDestinationFolder: false 

  
  - script: |
       cd stankinsv2/solution/
       echo $MY_PASSWORD_DOCKER| docker login --username ignatandrei --password-stdin
       echo version1 : $MyVersion
       echo version2 : $(MyVersion)
       #docker build . --build-arg version=$(MyVersion) -t stankins_linux -f Dockerfile_linux      
       docker build . -t stankins_linux -f Dockerfile_linux      
       docker image ls
       docker tag stankins_linux ignatandrei/stankins_linux
       docker push ignatandrei/stankins_linux
       docker create --name st stankins_linux
       docker container ls
       docker cp st:/app/ $(Build.ArtifactStagingDirectory)/linux-x64
       docker container kill st
       docker container prune -f

    displayName: 'docker'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'


- job: macOS
  pool:
    vmImage: 'macOS-10.13'
    variables:
        solution: '**/StankinsV2.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
  steps:
  - script: echo hello from macOS

  condition: false



- job: Deploy
  pool:
    vmImage: 'win1803'
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(System.ArtifactStagingDirectory)

  - script: |
        echo hello from deploy
        dir $(Build.ArtifactStagingDirectory)  
        rem echo test >>$(Build.ArtifactStagingDirectory)\a.txt

  - task: ArchiveFiles@2
    displayName: 'arhive linux'
    condition: and(always(),eq(variables['deployLinux'],1)) #succeeded('Linux')
    inputs:
      rootFolderOrFile: '$(System.ArtifactStagingDirectory)/drop/linux-x64'
      includeRootFolder: true
      archiveType: 'zip' 
      archiveFile: '$(Build.ArtifactStagingDirectory)/linux-x64-$(Build.BuildId).zip' 
      replaceExistingArchive: true 

  - task: ArchiveFiles@2
    displayName: 'arhive windows '
    condition: and(always(),eq(variables['deployWindows'],1)) #succeeded('Windows') 
    inputs:
      rootFolderOrFile: '$(System.ArtifactStagingDirectory)/drop/win10-x64'
      includeRootFolder: true
      archiveType: 'zip' 
      archiveFile: '$(Build.ArtifactStagingDirectory)/win10-x64-$(Build.BuildId).zip' 
      replaceExistingArchive: true 

  - task: GithubRelease@0
    inputs:
      gitHubConnection: ignatandrei
      repositoryName: ignatandrei/stankins
      action: 'create'
      target: 'master'
      title: 'Automated $(Build.BuildNumber) $(Build.BuildId) BuildWindows = $(deployWindows) BuildLinux= $(deployLinux)'
      tag: '$(Build.BuildNumber)'
      addChangeLog: true
      isDraft: false
      isPreRelease: false 
      tagSource: 'manual'

  dependsOn: 
  - Windows
  - Linux
  condition: or(succeeded('Windows') , succeeded('Linux'))
