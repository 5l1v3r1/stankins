# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/vsts/pipelines/apps/windows/dot-net
#https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml

variables:
    solution: '**/StankinsV2.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    year: $(Date:yyyy)
    month: $(Date:MM)
    day: $(Date:dd)

name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

jobs:
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: |
        echo hello from Windows
        echo $(Build.ArtifactStagingDirectory) $(TeamProject) $(BuildDefinitionName) $(SourceBranchName) $(Date:yyyyMMdd) $(Rev:.r)   
        echo %BUILDDEFINITIONNAME% %SOURCEBRANCHNAME% %(DATE:yyyyMMdd)% %(REV:.r)%    
        echo Hello World from %AGENT_NAME%.
        echo My ID is %AGENT_ID%.
        echo AGENT_WORKFOLDER contents:
        @dir %AGENT_WORKFOLDER%
        echo AGENT_BUILDDIRECTORY contents:
        @dir %AGENT_BUILDDIRECTORY%
        echo BUILD_SOURCESDIRECTORY contents:
        @dir %BUILD_SOURCESDIRECTORY%
        echo a $(Build.BuildId) $(Build.BuildNumber) 
        echo a $(year) 
        echo a $(MONTH) 
        echo a %year% 
        echo a %MONTH% 
        cmd /K set
    displayName: 'variables'

  - script: |
       cd stankinsv2/solution/
    displayName: 'docker'


  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.1.300'
    inputs:
        version: 2.1.300

  - script: |
        dotnet tool install  --tool-path . dotnet-property   
        dotnet-property "Stankinsv2/**/Stankins*.csproj" Version:"1.0.0.3"
    displayName: 'DOTNET property'

  - task: NuGetToolInstaller@0

  - task: NuGetCommand@2
    inputs:
        restoreSolution: '$(solution)'
  
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  - script: |
        echo start publish windows
        dotnet publish -o $(Build.ArtifactStagingDirectory)\win10-x64  -f netcoreapp2.1 -c Release -r win10-x64 stankinsv2/solution/StankinsV2/StankinsStatusWeb/StankinsAliveMonitor.csproj
        cd stankinsv2/solution/
        xcopy $(Build.ArtifactStagingDirectory)\win10-x64 win10-x64\ /I /E
        docker build . -t stankins_windows -f Dockerfile_win
        docker tag stankins_windows ignatandrei/stankins_windows
        docker image ls
        echo %MY_PASSWORD_DOCKER%| docker login --username ignatandrei --password-stdin
        docker push ignatandrei/stankins_windows
    displayName: 'docker'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
   
   
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
    variables:
        solution: '**/StankinsV2.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
  steps:
  - script: |
        echo hello from Linux
        echo $(Build.ArtifactStagingDirectory) $(TeamProject) $(BuildDefinitionName) $(SourceBranchName) $(Date:yyyyMMdd) $(Rev:.r)   
        echo $(Build.BuildId) $(Build.BuildNumber) 
    displayName: 'variables'
  
  - script: |
       cd stankinsv2/solution/
       echo $MY_PASSWORD_DOCKER| docker login --username ignatandrei --password-stdin
       docker build . -t stankins_linux -f Dockerfile_linux      
       docker image ls
       docker tag stankins_linux ignatandrei/stankins_linux
       docker push ignatandrei/stankins_linux
       docker create --name st stankins_linux
       docker container ls
       docker cp st:/app/ $(Build.ArtifactStagingDirectory)/linux-x64
       docker container kill st
       docker container prune -f

    displayName: 'docker'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

- job: macOS
  pool:
    vmImage: 'macOS-10.13'
    variables:
        solution: '**/StankinsV2.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
  steps:
  - script: echo hello from macOS

- job: Deploy
  pool:
    vmImage: 'win1803'
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)

  - script: |
        echo hello from deploy
        dir $(Build.ArtifactStagingDirectory)    
      
  - task: GithubRelease@0
    inputs:
      gitHubConnection: ignatandrei
      repositoryName: ignatandrei/stankins
      action: 'create'
      target: 'master'
      title: 'Release $(Build.BuildId) $(Build.BuildNumber)'
      addChangeLog: true
      isDraft: true

  dependsOn: 
  - Windows
  - Linux
  condition: succeeded()