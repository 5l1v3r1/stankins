@using  System.Data;
@using  System;
@using  System.Linq;
@using Stankins.Interfaces;
@using  System.Collections.Generic;
@using RazorLight
@using Stankins.AzureDevOps

@inherits TemplatePage<IDataToSent>
@{

    var jobs = Model.FindAfterName("jobs").Value;
    var steps = Model.FindAfterName("steps").Value;
    var depends=Model.FindAfterName("jobDepends").Value;
    var nl=Environment.NewLine;
	var q="\"";

}
<div></div>
@functions{

public string Base64Encode(string plainText) {
  var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
  return System.Convert.ToBase64String(plainTextBytes);
}

    class Job
    {

        public int Id;
        public string jobName;
        public List<Step> Steps = new List<Step>();
        public List<Job> JobDepends = new List<Job>();
        public string NodeId(){
            return "NodeJob"+Id;
        }

    }
    class Step
    {
        public int JobId;
        public int Id;
        public string displayName;
        public string name;
        public string NodeId(){
            return "NodeJob" + JobId + "_" + Id;
        }

    }

}

@{
    var allJobs=new Dictionary<string,Job>();
    foreach(DataRow drJob in jobs.Rows)
    {
        var j=new Job();
        j.Id= allJobs.Count;
        j.jobName=drJob["name"].ToString();
        allJobs.Add(j.jobName,j);
    }
    foreach ( DataRow step  in steps.Rows)
    {

        var j=allJobs[step["jobName"].ToString()];
        var s=new Step();
        s.Id= j.Steps.Count;
        s.JobId = j.Id;
        s.name = step["name"].ToString();
        var display = step["displayName"].ToString();
        if(string.IsNullOrWhiteSpace(display))
        {
            display =s.name;
        }
        s.displayName = display;
        j.Steps.Add(s);

    }

    foreach (DataRow job in depends.Rows)
    {
        var jobName= job["jobName"].ToString();
        var jobDepends = job["jobNameDepends"].ToString();
        var j=allJobs[jobName];
        j.JobDepends.Add(allJobs[jobDepends]);

    }
}
<div id="mydb"></div>




    @{
		var mermaidString="graph TD" +nl;
		foreach (var jobIter in allJobs.Values){
			var stepsJob=jobIter.Steps;
			var nrSteps=stepsJob.Count();

			if(nrSteps<1){
				continue;
			}
            var nodeId=jobIter.NodeId();
            foreach(var jDep in jobIter.JobDepends){
                mermaidString += (string.Format("end{0}-->start{1}{2}", jDep.NodeId(),nodeId,nl));
            }
            
        }
        
         //definition of graphs
        foreach (var jobIter in allJobs.Values)
        {
			var stepsJob=jobIter.Steps;
			var nrSteps=stepsJob.Count();

			if(nrSteps<1){
				continue;
			}
			
            mermaidString+= nl + "subgraph "+ jobIter.jobName ;
			mermaidString+= nl + $"start{jobIter.NodeId()}[{q}Start {jobIter.jobName}{q}]--> {stepsJob[0].NodeId()}";
			
			
			for(var sIter=0;sIter<nrSteps-1;sIter++){
				
				
				mermaidString+= nl +$"{stepsJob[sIter].NodeId()}[{q}{stepsJob[sIter].displayName}{q}] --> {stepsJob[sIter+1].NodeId()}";
				mermaidString = mermaidString.Replace("@","&#xA9;");
			}
			mermaidString+= nl + $"{stepsJob[nrSteps-1].NodeId()}[{q}{stepsJob[nrSteps-1].displayName}{q}] --> end{jobIter.NodeId()}[{q}End {jobIter.jobName}{q}]";
			mermaidString+= nl + "end";
        }

		 

    }

  
  
  <a href='@Raw("https://mermaidjs.github.io/mermaid-live-editor/#/edit/"+ Base64Encode(mermaidString))'>Live Mermaid</a>


  @Raw(mermaidString)

<small>
    Autogenerated from <a href="https://azurestankins.azurewebsites.net/">Stankins</a> with the Razor .cshtml file @nameof(SenderYamlAzurePipelineToDot) at @DateTime.Now.ToString("yyyy MMM dd HH:mm:ss")
</small>
