@using  System.Data;
@using  System;
@using  System.Linq;
@using Stankins.Interfaces;
@using  System.Collections.Generic;
@using RazorLight

@inherits TemplatePage<IDataToSent>
@{

    var tables = Model.FindAfterName("tables").Value;
    var columns = Model.FindAfterName("columns").Value;
    var relations = Model.FindAfterName("relations").Value;
    var properties = Model.FindAfterName("properties").Value;
    var keys = Model.FindAfterName("keys").Value;
    var nl = Environment.NewLine;
    var iTable = 0;


}
<div></div>
@functions{


    class Column
    {

        public string Id;
        public string Name;
        public Dictionary<string, string> Properties = new Dictionary<string, string>();

    }
    class Relation
    {
        public string parent_object_id;
        public string parent_column_id;
        public string referenced_object_id;
        public string referenced_column_id;
    }
    class KeyTable
    {
        public string Id;
        public string Name;
        public string TypeKey;
        public string ColumnId;
    }
    class Table
    {
        public string Id;
        public string Name;
        public List<Column> Columns = new List<Column>();
        public Dictionary<string, string> Properties = new Dictionary<string, string>();
        public List<Relation> Relations = new List<Relation>();
        public List<KeyTable> Keys = new List<KeyTable>();
        public Column FromId(string id)
        {
            return Columns.First(it => it.Id == id);
        }
        public string IdNode()
        {
            return string.Format("table{0}", Id);
        }
        public float RelPerCols()
        {
            float r = Relations.Count;
            float c = Columns.Count;
            return r / c;
        }
        public bool IsPK(string columnId)
        {
            return this.Keys.Exists(it => it.ColumnId == columnId && it.TypeKey == "PRIMARY_KEY_CONSTRAINT");
        }
        public IEnumerable<Column> ArrangeByPKName()
        {
            var pks = this.Columns.Where(it => this.IsPK(it.Id)).OrderBy(it => it.Name).ToArray();
            foreach (var c in pks)
            {
                yield return c;
            }
            var notPK = Columns.Except(pks).ToArray();
            foreach (var c in notPK)
            {
                yield return c;
            }

        }
        public bool HasPk()
        {
            foreach (var col in Columns)
            {
                var exist = IsPK(col.Id);
                if (exist)
                {
                    return true;
                }

            }
            return false;
        }
    }
}

@{
    var tablesList = new Dictionary<string, Table>();
    foreach (DataRow table in tables.Rows)
    {
        var t = new Table();
        t.Id = table["id"].ToString();
        t.Name = table["name"].ToString();
        var select = "TableName='tables' And id='" + t.Id + "'";
        var tableProperties = properties.Select(select);
        foreach (DataRow prop in tableProperties)
        {

            var val = prop["value"];
            if (val == null || val == DBNull.Value)
            {
                val = "(null)";
            }
            else
            {
                val = val.ToString();
            }
            t.Properties.Add(prop["valueName"].ToString(), val.ToString());

        }
        select = "tableId = '" + t.Id + "'";
        var cols = columns.Select(select);
        foreach (DataRow col in cols)
        {
            var c = new Column();
            c.Id = col["id"].ToString();
            c.Name = col["name"].ToString();
            t.Columns.Add(c);
            select = "TableName='columns' And id='" + c.Id + "'";
            tableProperties = properties.Select(select);
            foreach (DataRow prop in tableProperties)
            {

                var val = prop["value"];
                if (val == null || val == DBNull.Value)
                {
                    val = "(null)";
                }
                else
                {
                    val = val.ToString();
                }
                c.Properties.Add(prop["valueName"].ToString(), val.ToString());

            }

        }

        select = "tableId =  '" + t.Id + "'";
        var keysRows = keys.Select(select);
        foreach (var keyRow in keysRows)
        {

            var k = new KeyTable();
            k.Id = keyRow["id"].ToString();
            k.Name = keyRow["name"].ToString();
            k.TypeKey = keyRow["type_desc"].ToString();
            k.ColumnId = keyRow["column_id"].ToString();
            t.Keys.Add(k);
        }
        select = "parent_object_id =  '" + t.Id + "'";
        var rels = relations.Select(select);
        foreach (var rel in rels)
        {

            var r = new Relation();
            r.parent_object_id = t.Id;
            r.parent_column_id = rel["parent_column_id"].ToString();
            r.referenced_object_id = rel["referenced_object_id"].ToString();
            r.referenced_column_id = rel["referenced_column_id"].ToString();
            t.Relations.Add(r);
        }


        tablesList.Add(t.Id, t);

    }

    var nrTables = tablesList.Count;
    var nrCols = tablesList.Sum(it => it.Value.Columns.Count);
    var avgCols = nrCols / nrTables;
    var nrRels = tablesList.SelectMany(it => it.Value.Relations).Count();
    var avgRelsTable = nrRels / nrTables;
    var avgRelsCol = nrRels / nrCols;
    var tblMaxRels = tablesList.OrderByDescending(it => it.Value.Relations.Count).First().Value;
    var tblMaxRelsPerCols = tablesList.OrderByDescending(it => it.Value.RelPerCols()).First().Value;
    var avgRelPerCol = tblMaxRelsPerCols.RelPerCols();
    var tablesNoPK = tablesList.Where(it => !it.Value.HasPk()).ToArray();

}
Summary:
<table border="1">
    <tr><td>Number of Tables</td><td>@nrTables</td></tr>
    <tr><td>Avg of Columns per Table</td><td>@avgCols</td></tr>
    <tr><td>Relations: Total</td><td>@nrRels</td></tr>
    <tr><td>Relation Avg / table</td><td>@avgRelsTable </td></tr>
    <tr><td>Relation Avg / column</td><td>@avgRelsCol</td></tr>
    <tr>
        <td>Table with Absolute Max relations </td>
        <td><a href="#@tblMaxRels.IdNode()">@tblMaxRels.Name</a> : @tblMaxRels.Relations.Count</td>
    </tr>
    <tr>
        <td>Table with Max relation per column</td>
        <td>
            <a href="#@tblMaxRelsPerCols.IdNode()">@tblMaxRelsPerCols.Name</a>
            : @avgRelPerCol.ToString("0.0")
        </td>
    </tr>
    <tr>
        <td>Tables Without PK</td>
        <td>
            @foreach (var t in tablesNoPK)
            {
                <a href="#@t.Value.IdNode()">@t.Value.Name</a>
            }
        </td>
    </tr>
</table>

<br />
Tables:

<table border="1">
    <tr>
        <td>Number</td>
        <td>Table Name</td>

        <td>Relations</td>
        <td>Usage</td>
    </tr>
    @foreach (var kv in tablesList)
    {
        var curTable = kv.Value;
        iTable++;
        var idTable = curTable.Id;
        var idNode = curTable.IdNode();
        var relation = "";

        var iRel = 0;
        foreach (var rel in curTable.Relations)
        {
            iRel++;


            var tblRelated = tablesList[rel.referenced_object_id];
            var colRelate = tblRelated.Columns.First(it => it.Id == rel.referenced_column_id);

            relation += string.Format("{2})<a href='#{0}'>{1}</a>;<br />", tblRelated.IdNode(), tblRelated.Name + "." + colRelate.Name, iRel);

        }//end foreach relation
        if (iRel == 0)
        {
            relation = "-";
        }
        <tr>
            <td>@iTable </td>
            <td><a href="#@idNode">@curTable.Name</a></td>
            <td>@Raw(relation)</td>
            <td>This is used for </td>
        </tr>
    }
</table>
<br />
@foreach (var kv in tablesList)
{
    var curTable = kv.Value;

    var iColumn = 0;
    var idTable = curTable.Id;
    var idNode = string.Format("table{0}", idTable);
    var divProps = "props" + idNode;
    var iProp = 0;
    var divKeys = "key" + idNode;

    <br />

    <a id="@idNode">Table <em> @curTable.Name </em></a>
    <span onclick="javascript:toggledisplay('@divProps')">
        Show/hide properties
    </span>
    <div id='@divProps' style="display:none">

        <table border="1" cellborder="1" cellspacing="0">
            <tr><td>Nr</td><td>Name</td><td>Value</td></tr>
            @foreach (var prop in curTable.Properties.OrderBy(it => it.Key))
            {
                <tr><td>@(++iProp)</td><td>@prop.Key</td><td>@prop.Value</td></tr>
            }
        </table>
    </div>
    <span onclick="javascript:toggledisplay('@divKeys')">
        Show/hide Keys
    </span>
    <div id='@divKeys' style="display:none">

        <table border="1" cellborder="1" cellspacing="0">
            <tr><td>Nr</td><td>Key</td><td>Value</td><td>Column</td></tr>
            @{
                iProp = 0;
            }

            @foreach (var keyTable in curTable.Keys.OrderBy(it => it.Name))
            {
                <tr>
                    <td>@(++iProp)</td>
                    <td>@keyTable.Name</td>
                    <td>@keyTable.TypeKey</td>
                    <td>@curTable.FromId(keyTable.ColumnId).Name</td>
                </tr>
            }

        </table>
    </div>

    <p>
        Columns : @curTable.Columns.Count
    </p>
    <table border="1" cellborder="1" cellspacing="0">
        <tr>
            <td>Nr.</td>
            <td>Name</td>
            <td>Type</td>
            <td>Relations</td>
            <td>Description</td>
        </tr>
        @foreach (var col in curTable.ArrangeByPKName())
        {
            iColumn++;
            var iRel = 0;
            var rel = "";
            var relColumns = curTable.Relations.Where(it => it.parent_column_id == col.Id).ToArray();
            foreach (var rel1 in relColumns)
            {
                iRel++;

                var tableRel = tablesList[rel1.referenced_object_id];
                var colRel = tableRel.Columns.First(it => it.Id == rel1.referenced_column_id);

                rel += string.Format("{2})<a href='#{0}'>{1}</a>;<br />", tableRel.IdNode(), tableRel.Name + "." + colRel.Name, iRel);

            }

            if (iRel == 0)
            {
                rel = "-";
            }
            var divPropsCol = "col_" + col.Id;
            bool isPK = false;
            isPK = curTable.IsPK(col.Id);


            <tr>
                <td>@iColumn</td>
                <td port='@col.Id'>
                    <b>@col.Name</b>
                    @if (isPK)
                    {
                        <img src='http://pngimg.com/uploads/key/key_PNG1180.png' height="20" width="20" />
                    }



                    <span onclick="javascript:toggledisplay('@divPropsCol')">
                        (click for properties)
                    </span>
                    <div id='@divPropsCol' style="display:none">
                        <table border="1" cellborder="1" cellspacing="0">
                            <tr><td>Name</td><td>Value</td></tr>
                            @foreach (var colProperty in col.Properties.OrderBy(it => it.Key))
                            {
                                <tr><td>@colProperty.Key</td><td>@colProperty.Value</td></tr>
                            }
                        </table>
                    </div>
                </td>
                <td>@col.Properties["DATA_TYPE"]</td>
                <td>@Raw(rel)</td>
                <td>The field @col.Name is used for </td>
            </tr>
        }


    </table>

    <br />

}


<script>
    function toggledisplay(elementID) {
        (function (style) {
            style.display = style.display === 'none' ? '' : 'none';
        })(document.getElementById(elementID).style);
    }
</script>

