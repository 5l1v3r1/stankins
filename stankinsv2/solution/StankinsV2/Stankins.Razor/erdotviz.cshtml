@using  System.Data;
@using  System;
@using Stankins.Interfaces;
@model IDataToSent
@{
    var databases = Model.FindAfterName("databases").Value;
    var tables = Model.FindAfterName("tables").Value;
    var columns = Model.FindAfterName("columns").Value;
}


        digraph {
    graph [pad="0.5", nodesep="0.5", ranksep="2"];
    node [shape=plain]
    rankdir=LR;


@foreach (DataRow db in databases.Rows)
{
    var relation = "";
    var id = db["id"].ToString();
    if (db["name"].ToString() != "model")
    {
        continue;
    }
    foreach (DataRow table in tables.Rows)
    {

        if (table["databaseId"].ToString() != id)
        {
            continue;
        }

        var idTable = table["id"].ToString();
        relation += string.Format("{0};", table["name"]);

        @string.Format("table{0}", @table["id"])

        @Raw("[label =<");

        <table border="0" cellborder="1" cellspacing="0">
            <tr><td><i>@table["name"]</i></td></tr>
            @foreach (DataRow col in columns.Rows)
            {
                if (col["tableId"].ToString() != idTable)
                {
                    continue;
                }
                <tr><td port='@col["id"]'>@col["name"]</td></tr>
            }
        </table>

        @Raw(">];");
        @string.Format("subgraph cluster_{0}", id);
        @Raw("{");
        @Raw("style = filled;");

        @Raw("color = lightgrey;");

        @Raw("node[style = filled, color = white];");
        @if (!string.IsNullOrWhiteSpace(relation))
        {
            @Raw(relation)
        }


        @Raw(string.Format("label = '{0}';", db["name"]));
        @relation
        @Raw("}");
    }
}



}//end digraph
