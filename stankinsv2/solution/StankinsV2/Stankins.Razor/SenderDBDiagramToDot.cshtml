@using  System.Data;
@using  System;
@using  System.Linq;
@using Stankins.Interfaces;
@using  System.Collections.Generic;
@using RazorLight
@using Stankins.Razor
@inherits TemplatePage<IDataToSent>
@model IDataToSent


@{

    var tables = Model.FindAfterName("tables").Value;
    var columns = Model.FindAfterName("columns").Value;
    var relations = Model.FindAfterName("relations").Value;
    var properties = Model.FindAfterName("properties").Value;
    var nl = Environment.NewLine;


}
@functions{


    class Column
    {

        public string Id;
        public string Name;
        public Dictionary<string, string> Properties = new Dictionary<string, string>();

    }
    class Relation
    {
        public string parent_object_id;
        public string parent_column_id;
        public string referenced_object_id;
        public string referenced_column_id;
    }
    class Table
    {
        public string Id;
        public string Name;
        public List<Column> Columns = new List<Column>();
        public Dictionary<string, string> Properties = new Dictionary<string, string>();
        public List<Relation> Relations = new List<Relation>();
        public string IdNode()
        {
            return string.Format("table{0}", Id);
        }
        public float RelPerCols()
        {
            float r = Relations.Count;
            float c = Columns.Count;
            return r / c;
        }
    }
}

@{
    var tablesList = new Dictionary<string, Table>();
    foreach (DataRow table in tables.Rows)
    {
        var t = new Table();
        t.Id = table["id"].ToString();
        t.Name = table["name"].ToString();
        var select = "TableName='tables' And id='" + t.Id + "'";
        var tableProperties = properties.Select(select);
        foreach (DataRow prop in tableProperties)
        {

            var val = prop["value"];
            if (val == null || val == DBNull.Value)
            {
                val = "(null)";
            }
            else
            {
                val = val.ToString();
            }
            t.Properties.Add(prop["valueName"].ToString(), val.ToString());

        }
        select = "tableId = '" + t.Id + "'";
        var cols = columns.Select(select);
        foreach (DataRow col in cols)
        {
            var c = new Column();
            c.Id = col["id"].ToString();
            c.Name = col["name"].ToString();
            t.Columns.Add(c);
            select = "TableName='columns' And id='" + c.Id + "'";
            tableProperties = properties.Select(select);
            foreach (DataRow prop in tableProperties)
            {

                var val = prop["value"];
                if (val == null || val == DBNull.Value)
                {
                    val = "(null)";
                }
                else
                {
                    val = val.ToString();
                }
                c.Properties.Add(prop["valueName"].ToString(), val.ToString());

            }

        }
        select = "parent_object_id =  '" + t.Id + "'";
        var rels = relations.Select(select);
        foreach (var rel in rels)
        {

            var r = new Relation();
            r.parent_object_id = t.Id;
            r.parent_column_id = rel["parent_column_id"].ToString();
            r.referenced_object_id = rel["referenced_object_id"].ToString();
            r.referenced_column_id = rel["referenced_column_id"].ToString();
            t.Relations.Add(r);
        }
        tablesList.Add(t.Id, t);

    }

}



<div id="mydb"></div>
<script src='https://github.com/mdaines/viz.js/releases/download/v2.1.2/viz.js'></script>
<script src='https://github.com/mdaines/viz.js/releases/download/v2.1.2/full.render.js'></script>

<script>
    
    var t = `
    digraph {
    graph [pad="0.5", nodesep="0.5", ranksep="2"];
    node [shape=plain]
    rankdir=LR;


    @{
        var relation = "";

        foreach (var kv in tablesList)
        {

            var table = kv.Value;
            var idNode = table.IdNode();
            bool existRelation = false;

            foreach (var rel in table.Relations)
            {

                existRelation = true;
                var tblRelated = tablesList[rel.referenced_object_id];
                var colRelate = tblRelated.Columns.First(it => it.Id == rel.referenced_column_id);

                //TODO: edge labels: http://www.graphviz.org/doc/info/shapes.html#html
                relation += $"{idNode}:{rel.parent_column_id.Replace("_","")} -> {tblRelated.IdNode()}:{rel.referenced_column_id.Replace("_", "")};";



            }//end foreach relation
            if (!existRelation)
            {
                relation += string.Format("{0};", idNode);
            }
            relation += nl;
            @idNode

            @Raw("[label =<" + nl);

            <table border="0" cellborder="1" cellspacing="0">
                <tr><td href='#@idNode'>@table.Name</td></tr>
                @foreach (var col in table.Columns)
                {
                   
                    <tr><td port='@col.Id.Replace("_", "")'  >@col.Name</td></tr>
                }
            </table>

            @Raw(">];" + nl);

        }//end foreach table
        @string.Format("subgraph cluster_database");
        @Raw("{" + nl);
        @Raw("style = filled;" + nl);

        @Raw("color = lightgrey;" + nl);

        @Raw("node[style = filled, color = white];" + nl);


        @Raw(string.Format("label = \"Database {0}\";" + nl, ""));
        @if (!string.IsNullOrWhiteSpace(relation))
         {
             @Raw(relation)
         }
        @Raw("}");


    }



    }//end digraph

    `;


    let viz = new Viz();
    viz.renderSVGElement(t)
        .then(function (element) {
            document.getElementById('mydb').appendChild(element);
        })
        .catch(error => window.alert('please debug the error' + error));
</script>

<small>
    Autogenerated from <a href="https://azurestankins.azurewebsites.net/">Stankins</a> with the Razor .cshtml file @nameof(SenderDBDiagramToDot) at @DateTime.Now.ToString("yyyy MMM dd HH:mm:ss")
</small>
