@using  System.Data;
@using  System;
@using  System.Linq;
@using Stankins.Interfaces;
@using  System.Collections.Generic;
@using RazorLight
@inherits TemplatePage<IDataToSent>

@{

    var tables = Model.FindAfterName("tables").Value;
    var columns = Model.FindAfterName("columns").Value;
    var relations = Model.FindAfterName("relations").Value;
    var properties = Model.FindAfterName("properties").Value;
    var nl = Environment.NewLine;



}
<div></div>
@functions{


    class Column
    {

        public string Id;
        public string Name;
        public Dictionary<string, string> Properties = new Dictionary<string, string>();

    }
    class Relation
    {
        public string parent_object_id;
        public string parent_column_id;
        public string referenced_object_id;
        public string referenced_column_id;
    }
    class Table
    {
        public string Id;
        public string Name;
        public List<Column> Columns = new List<Column>();
        public Dictionary<string, string> Properties = new Dictionary<string, string>();
        public List<Relation> Relations = new List<Relation>();
        public string IdNode()
        {
            return string.Format("table{0}", Id);
        }
        public float RelPerCols()
        {
            float r = Relations.Count;
            float c = Columns.Count;
            return r / c;
        }
    }
}

@{
    var tablesList = new Dictionary<string, Table>();
    foreach (DataRow table in tables.Rows)
    {
        var t = new Table();
        t.Id = table["id"].ToString();
        t.Name = table["name"].ToString();
        var select = "TableName='tables' And id='" + t.Id + "'";
        var tableProperties = properties.Select(select);
        foreach (DataRow prop in tableProperties)
        {

            var val = prop["value"];
            if (val == null || val == DBNull.Value)
            {
                val = "(null)";
            }
            else
            {
                val = val.ToString();
            }
            t.Properties.Add(prop["valueName"].ToString(), val.ToString());

        }
        select = "tableId = '" + t.Id + "'";
        var cols = columns.Select(select);
        foreach (DataRow col in cols)
        {
            var c = new Column();
            c.Id = col["id"].ToString();
            c.Name = col["name"].ToString();
            t.Columns.Add(c);
            select = "TableName='columns' And id='" + c.Id + "'";
            tableProperties = properties.Select(select);
            foreach (DataRow prop in tableProperties)
            {

                var val = prop["value"];
                if (val == null || val == DBNull.Value)
                {
                    val = "(null)";
                }
                else
                {
                    val = val.ToString();
                }
                c.Properties.Add(prop["valueName"].ToString(), val.ToString());

            }

        }
        select = "parent_object_id =  '" + t.Id + "'";
        var rels = relations.Select(select);
        foreach (var rel in rels)
        {

            var r = new Relation();
            r.parent_object_id = t.Id;
            r.parent_column_id = rel["parent_column_id"].ToString();
            r.referenced_object_id = rel["referenced_object_id"].ToString();
            r.referenced_column_id = rel["referenced_column_id"].ToString();
            t.Relations.Add(r);
        }
        tablesList.Add(t.Id, t);

    }

}
<div id="header">
    <span>Some content here</span>
</div>

<div id="body">
    @RenderBody()
</div>